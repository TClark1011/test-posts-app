// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider      = "zod-prisma"
    modelCase     = "camelCase"
    modelSuffix   = "Schema"
    relationModel = false
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_PRISMA_URL")
    directUrl = env("DATABASE_URL_NON_POOLING")
}

model Post {
    id String @id @default(uuid())

    /// @zod.min(1).max(64)
    title   String
    /// @zod.min(1).max(1024)
    content String

    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    authorUserId String
    autor        User     @relation(fields: [authorUserId], references: [id], onDelete: Cascade)

    @@index([title])
    @@index([content])
}

// Auth

model User {
    id String @id @unique @default(uuid())

    /// @zod.email()
    email          String  @unique
    email_verified Boolean @default(false)

    /// @zod.min(3).max(24)
    username String

    auth_session              Session[]
    key                       Key[]
    Post                      Post[]
    email_verification_claims EmailVerificationClaim[]
}

model Session {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model Key {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

// A "claim" represents a user entering their email into the system
// and an email being sent out that allows the user to verify that they
// own the email address they entered.
model EmailVerificationClaim {
    token   String   @id @unique
    expires DateTime
    user_id String
    user    User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
}
